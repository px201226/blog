{"componentChunkName":"component---src-templates-post-jsx","path":"/struct/","result":{"data":{"site":{"siteMetadata":{"title":"SOOLAB"}},"markdownRemark":{"id":"f3e9b018-dcf2-5066-be00-909086dcbff2","excerpt":"데코레이터 패턴 OCP 살펴보기 클래스는 확장에는 열려 있어야 하지만 변경에는 닫혀 있어야 한다. 기존 코드를 변경하지 않아도 확장할 수 있어야 한다. 옵저버 패턴을 예로 들면 옵저버를 새로 추가하면 주제에 코드를 추가하지 않으면서도 얼마든지 확장이 가능하다. 모든 부분에서 OCP를 준수해야 하는가? 현실적으로도 불가능하고 OCP를 지키다 보면 추상화가 …","html":"<h2>데코레이터 패턴</h2>\n<h3>OCP 살펴보기</h3>\n<ul>\n<li>\n<p>클래스는 확장에는 열려 있어야 하지만 변경에는 닫혀 있어야 한다.</p>\n<ul>\n<li>기존 코드를 변경하지 않아도 확장할 수 있어야 한다.</li>\n<li>옵저버 패턴을 예로 들면 옵저버를 새로 추가하면 주제에 코드를 추가하지 않으면서도 얼마든지 확장이 가능하다.</li>\n</ul>\n</li>\n<li>\n<p>모든 부분에서 OCP를 준수해야 하는가?</p>\n<ul>\n<li>현실적으로도 불가능하고 OCP를 지키다 보면 추상화가 필요한데, 추상화를 하다 보면 코드가 복잡해진다.</li>\n<li>그래서 디자인한 것 중에서 가장 바뀔 가능성이 높은 부분을 중심적으로 살펴보고 OCP를 적용하는 방법이 좋다.</li>\n</ul>\n</li>\n</ul>\n<!-- more -->\n<aside>\n💡 무조건 OCP를 적용한다면 괜히 쓸데없는 일을 하며 시간을 낭비할 수 있으며, 필요 이상으로 복잡하고 이해하기 힘든 코드를 만들게 되는 부작용이 발생할 수 있다.\n</aside>\n<h3>데코레이터 패턴의 정의</h3>\n<ul>\n<li>데코레이터 패턴은 객체에 추가 요소를 동적으로 더할 수 있다.</li>\n<li>데코레이터를 사용하면 서브클래스를 만들 때보다 훨씬 유연하게 기능을 확장할 수 있다.</li>\n</ul>\n<p><img src=\"https://s3-us-west-2.amazonaws.com/secure.notion-static.com/a1d2e1b7-7f8f-4fe6-af62-bc391740ff17/Untitled.png\" alt=\"Untitled\"></p>\n<ul>\n<li>\n<p>데코레이터가 컴포넌트를 상속받는 이유</p>\n<ul>\n<li>상속으로 행동을 물려받는 것은 아님</li>\n<li>행동은 기본 구성 요소와는 데코레이터 등을 인스턴스 변수에 저장하여 호출하는 식</li>\n<li>데코레이터로 감싸는 객체와 형식을 맞추기 위해 상속 (원래 있던 구성 요소가 들어갈 자리에 자기가 들어갈 수 있어야 하므로)</li>\n</ul>\n</li>\n</ul>\n<h3>데코레이터 패턴 구현하기</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// Component 클래스</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> calss <span class=\"token class-name\">Beverage</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token class-name\">String</span> description <span class=\"token operator\">=</span> <span class=\"token string\">\"제목 없음\"</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getDescription</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> description<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">double</span> <span class=\"token function\">cost</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 데코레이터 클래스(첨가물 클래스)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CondimentDecorator</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Beverage</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// 형식을 맞추기 위해 상속</span>\n\t<span class=\"token class-name\">Beverage</span> beverage<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 데코레이터가 감쌀 음료를 나타냄</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getDescription</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>음료 코드 구현</h4>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Espresso</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Beverage</span> <span class=\"token punctuation\">{</span>\n\t\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Espresso</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>\n\t\t\tdescription <span class=\"token operator\">=</span> <span class=\"token string\">\"에스프레소\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">public</span> doublc <span class=\"token function\">cost</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">1.99</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">HouseBlend</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Beverage</span> <span class=\"token punctuation\">{</span>\n\t\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Espresso</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>\n\t\t\tdescription <span class=\"token operator\">=</span> <span class=\"token string\">\"하우스 블렌드\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">public</span> doublc <span class=\"token function\">cost</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0.99</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>첨가물 코드 구현</h4>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Mocha</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">CondimentDecorator</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Mocha</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Beverage</span> beverage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>beverage <span class=\"token operator\">=</span> beverage<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getDescription</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> beverage<span class=\"token punctuation\">.</span><span class=\"token function\">getDescription</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\", 모카\"</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">double</span> <span class=\"token function\">cost</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> beverage<span class=\"token punctuation\">.</span><span class=\"token function\">cost</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">0.2</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4>테스트 코드</h4>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 하우스 블렌드 커피 + 모카 2샷 + 휩 추가</span>\n<span class=\"token class-name\">Beverage</span> beverage <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HouseBlend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nbeverage <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Mocha</span><span class=\"token punctuation\">(</span>beverage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nbeverage <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Mocha</span><span class=\"token punctuation\">(</span>beverage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nbeverage <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Whip</span><span class=\"token punctuation\">(</span>beverage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>정리</h3>\n<ul>\n<li>데코레이터 패턴의 의도는 감싸고 있는 객체에 행동을 추가하는 용도이다.</li>\n<li>만약 여러 단계의 데코레이터를 파고 들어가서 어떤 작업을 해야 한다면 데코레이터 패턴이 만들어진 의도와는 어긋난다.</li>\n<li>추상 구상 요소(Component) 가 아닌 특정 Concrete Component의 의존하여 어떤 작업을 해야하는 경우에는 데코레이터 패턴의 의도와는 맞지 않기 때문에 패턴 사용을 다시 생각해봐야 한다.</li>\n</ul>","frontmatter":{"title":"디자인 패턴 - 구조 패턴","date":"April 07, 2022","update":"April 07, 2022","tags":["디자인 패턴"],"series":null},"fields":{"slug":"/struct/","readingTime":{"minutes":4.265}}},"seriesList":{"edges":[{"node":{"id":"bad021b0-8468-5808-8daa-8cf3434c19ae","fields":{"slug":"/ch1/"},"frontmatter":{"title":"1장 - 신뢰할 수 있고 확장 가능하며 유지보수하기 쉬운 애플리케이션"}}},{"node":{"id":"1c3bf38a-5822-589b-ae08-5e0182388d1a","fields":{"slug":"/ch2/"},"frontmatter":{"title":"2장 - 데이터 모델과 질의 언어"}}},{"node":{"id":"68b667f0-fbb0-5312-bba3-7728df4a1d74","fields":{"slug":"/ch3/"},"frontmatter":{"title":"3장 - 저장소와 검색"}}},{"node":{"id":"22d5ddb1-57c0-5f00-8699-cefd462d1666","fields":{"slug":"/ch4/"},"frontmatter":{"title":"4장 - 부호화와 발전"}}},{"node":{"id":"137b1767-6e4e-5fdf-a9f9-0b3798cbe37e","fields":{"slug":"/ch5/"},"frontmatter":{"title":"5장 - 복제"}}},{"node":{"id":"7a8cd6aa-bb6e-55b4-9854-4288e54769ee","fields":{"slug":"/ch6/"},"frontmatter":{"title":"6장 - 파티셔닝"}}},{"node":{"id":"0d8cea97-6f8f-5e28-b4ad-7e48cc2d2e46","fields":{"slug":"/ch7/"},"frontmatter":{"title":"7장 - 트랜잭션"}}},{"node":{"id":"645ed70a-de7e-58f4-a2a3-cb643a99e30a","fields":{"slug":"/ch8/"},"frontmatter":{"title":"8장 - 분산 시스템의 골칫거리"}}},{"node":{"id":"0cf94437-bd98-5772-bde9-914727aa343e","fields":{"slug":"/ch1/"},"frontmatter":{"title":"1부 - 성능 기초"}}},{"node":{"id":"130946b3-e281-5f87-8dd1-cef00be4a774","fields":{"slug":"/ch2/"},"frontmatter":{"title":"2부 - 성능 개선"}}},{"node":{"id":"34735664-ed59-5784-a071-1227717349e3","fields":{"slug":"/ch3/"},"frontmatter":{"title":"3부 - 화면 응답시간 분석"}}},{"node":{"id":"a2c4d2d8-b012-5449-9251-3bcc368876ea","fields":{"slug":"/ch4/"},"frontmatter":{"title":"4부 - 프로세스 이해하기"}}},{"node":{"id":"ee53721c-3561-5f47-9065-76762ebce369","fields":{"slug":"/ch5/"},"frontmatter":{"title":"5부 - 소스코드 최적화"}}},{"node":{"id":"0ee045de-1f2e-5326-840b-f7513c16f2d7","fields":{"slug":"/ch6/"},"frontmatter":{"title":"6부 - SQL 최적화"}}},{"node":{"id":"b3880869-c0db-5d58-948e-92985250cf2d","fields":{"slug":"/ch7/"},"frontmatter":{"title":"7부 - 애플리케이션 입장에서의 SQL 튜닝"}}},{"node":{"id":"cf31c6e7-91a8-55a7-beea-5dca2e2460fa","fields":{"slug":"/spring-autoconfigure/"},"frontmatter":{"title":"SpringBoot AutoConfiguration 시작하기"}}},{"node":{"id":"bbcc04f9-2935-5753-9a7e-cd8fdfcc662c","fields":{"slug":"/behavior/"},"frontmatter":{"title":"디자인 패턴 - 행동 패턴"}}},{"node":{"id":"f3e9b018-dcf2-5066-be00-909086dcbff2","fields":{"slug":"/struct/"},"frontmatter":{"title":"디자인 패턴 - 구조 패턴"}}},{"node":{"id":"d7818847-fabd-52c1-94c6-4907e05a3490","fields":{"slug":"/create/"},"frontmatter":{"title":"디자인 패턴 - 생성 패턴"}}},{"node":{"id":"c7e63a70-6b62-52e8-ac0f-d5dcdecd7147","fields":{"slug":"/Exactly_Once_Semantics/"},"frontmatter":{"title":"카프카는 어떻게 Exactly-Once Semantics 보장하나?"}}},{"node":{"id":"1cda8db3-a1d2-56f9-85e0-29bac23a0650","fields":{"slug":"/trasaction_in_kafka/"},"frontmatter":{"title":"카프카에서의 Transactions"}}},{"node":{"id":"09549337-253c-501f-ba42-533815a37e3c","fields":{"slug":"/\benabling_exactly_once_kafka_streams/"},"frontmatter":{"title":"카프카 스트림즈의 정확히 한 번"}}},{"node":{"id":"3dcd2238-18eb-57ef-9cd3-c0177a3c1954","fields":{"slug":"/Amazon SQS Deep Dive/"},"frontmatter":{"title":"Amazon SQS 딥다이브"}}},{"node":{"id":"d814ac35-d925-5139-ac77-ee416f12dbcb","fields":{"slug":"/Spring Cloud AWS Messaging Module Best Practice/"},"frontmatter":{"title":"Spring Cloud AWS Messaging 모듈 문제점 및 튜닝"}}},{"node":{"id":"ff41f5b0-73ba-5595-aebb-35db1d98dc0b","fields":{"slug":"/java-collection-wrapper/"},"frontmatter":{"title":"Collection Wrapper 클래스를 이용한 Service 계층 리팩토링 "}}},{"node":{"id":"814be12c-5d81-5869-910d-04f5c3fce410","fields":{"slug":"/spring-cache-hierarchy/"},"frontmatter":{"title":"Spring Cache 로 캐시 계층 구조 사용하기"}}},{"node":{"id":"784bc412-aba6-543c-bf75-23eaddb9ed64","fields":{"slug":"/redis-event-notifications/"},"frontmatter":{"title":"Redis Keyspace Notifications에 대해 알아보자"}}},{"node":{"id":"d488972a-385d-5d13-bbfe-08c074fa8372","fields":{"slug":"/jpa-slow-cause/"},"frontmatter":{"title":"JPA가 느릴 수 밖에 없는 원초적인 이유"}}},{"node":{"id":"2dd75ae1-e168-5f46-a340-b7f8dd712d7a","fields":{"slug":"/ehcache3/"},"frontmatter":{"title":"Ehcache3 캐시 라이브러리 소개 (with Spring Boot)"}}},{"node":{"id":"2db7d058-3179-54bf-ac47-0b4f61b8e897","fields":{"slug":"/mysql-primary-key-design/"},"frontmatter":{"title":"고성능을 위한 MySQL Primary Key 설계 전략"}}},{"node":{"id":"f1907721-044b-5781-8b3f-9df0fbf38ec8","fields":{"slug":"/tomcat/"},"frontmatter":{"title":"Apache Tomcat 이해하기(NIO Connector 중심)"}}}]},"previous":{"fields":{"slug":"/behavior/"},"frontmatter":{"title":"디자인 패턴 - 행동 패턴"}},"next":{"fields":{"slug":"/create/"},"frontmatter":{"title":"디자인 패턴 - 생성 패턴"}}},"pageContext":{"id":"f3e9b018-dcf2-5066-be00-909086dcbff2","series":null,"previousPostId":"bbcc04f9-2935-5753-9a7e-cd8fdfcc662c","nextPostId":"d7818847-fabd-52c1-94c6-4907e05a3490"}},"staticQueryHashes":[],"slicesMap":{}}