{"componentChunkName":"component---src-templates-post-jsx","path":"/java-collection-wrapper/","result":{"data":{"site":{"siteMetadata":{"title":"@Soo"}},"markdownRemark":{"id":"ff41f5b0-73ba-5595-aebb-35db1d98dc0b","excerpt":"1. 개요 상품을 저장하고 저장되어 있는 상품 가격의 합을 계산하는 서비스를 구현한다. 해당 요구사항의 절차지향적으로 구현해보고, Collection Wrapper 클래스를 두어 객체지향적인 코드로 리팩토링 해본다. Spring Data JPA 와 연동하는 방법도 알아본다. 2. 모델링 2.1 절차지향적인 구현 DB로부터 상품을 조회해온 뒤, 컬렉션 원소…","html":"<h1>1. 개요</h1>\n<ul>\n<li>상품을 저장하고 저장되어 있는 상품 가격의 합을 계산하는 서비스를 구현한다.</li>\n<li>해당 요구사항의 절차지향적으로 구현해보고, Collection Wrapper 클래스를 두어 객체지향적인 코드로 리팩토링 해본다.</li>\n<li>Spring Data JPA 와 연동하는 방법도 알아본다.</li>\n</ul>\n<!-- more -->\n<h1>2. 모델링</h1>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Getter</span>\n<span class=\"token annotation punctuation\">@Entity</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Product</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token annotation punctuation\">@Id</span> <span class=\"token annotation punctuation\">@GeneratedValue</span><span class=\"token punctuation\">(</span>strategy <span class=\"token operator\">=</span> <span class=\"token class-name\">GenerationType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">IDENTITY</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> price<span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">ProductJpaRepository</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">JpaRepository</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Product</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Long</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Service</span>\n<span class=\"token annotation punctuation\">@RequiredArgsConstructor</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ProductService</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">ProductJpaRepository</span> productJpaRepository<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Integer</span> <span class=\"token function\">getTotalPrice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n        <span class=\"token comment\">// 여기에 우리의 핵심 비지니스 로직인 상품 가격의 합계 계산 로직을 구현한다.</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>2.1 절차지향적인 구현</h2>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Integer</span> <span class=\"token function\">getTotalPrice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\n\t<span class=\"token keyword\">final</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Product</span><span class=\"token punctuation\">></span></span> products <span class=\"token operator\">=</span> productJpaRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token class-name\">Integer</span> totalPrice <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">Product</span> product <span class=\"token operator\">:</span> <span class=\"token class-name\">Products</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      totalPrice <span class=\"token operator\">+=</span> product<span class=\"token punctuation\">.</span><span class=\"token function\">getPrice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> price<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>DB로부터 상품을 조회해온 뒤, 컬렉션 원소를 돌면서 <code class=\"language-text\">totalPrice</code> 라는 로컬 변수에 상품 가격의 합계금액을 누적한다.</li>\n<li>전형적인 절차지향적인 코드의 예다.</li>\n</ul>\n<h2>2.2 Java Stream API를 이용한 함수형 프로그래밍 구현</h2>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Integer</span> <span class=\"token function\">getTotalPrice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">final</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Product</span><span class=\"token punctuation\">></span></span> products <span class=\"token operator\">=</span> productJpaRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> products<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>                   <span class=\"token comment\">// (1)</span>\n              <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Product</span><span class=\"token operator\">::</span><span class=\"token function\">getPrice</span><span class=\"token punctuation\">)</span>          <span class=\"token comment\">// (2)</span>\n              <span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Intger</span><span class=\"token operator\">::</span><span class=\"token function\">sum</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">// (3)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>\n<p>함수형 프로그래밍 스타일로 구현하였지만, 여전히 코드에서 합계금액을 계산하기 위한 절차를 기술하고 있다.</p>\n<ul>\n<li><strong>(1)</strong> List<Product> products 를 Stream 으로 반환한다. <code class=\"language-text\">(레코드를 건건히 처리할 것이다)</code></li>\n<li><strong>(2)</strong> Product 타입을 getPrice() 로 Integer 타입으로 변환한다.</li>\n<li><strong>(3)</strong> Integer로 변환된 값을 0부터 누적시켜 합을 구한다.</li>\n</ul>\n</li>\n</ul>\n<h2>2.3 객체지향적인 구현</h2>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Integer</span> <span class=\"token function\">getTotalPrice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">final</span> <span class=\"token class-name\">Products</span> products <span class=\"token operator\">=</span> productJpaRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> products<span class=\"token punctuation\">.</span><span class=\"token function\">getTotalPrice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>Products 라는 List<Product> 의 Wrapper 클래스를 만들었다.</li>\n<li>서비스 계층에서는 Products 라는 Collection Wrapper 클래스에게 상품의 합계금액을 계산하라는 메시지를 보낸다.</li>\n<li>가장 객체지향적인 접근이다.</li>\n</ul>\n<h2>3. Collection Wrapper 클래스 구현</h2>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@RequiredArgsConstructor</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Products</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Iterable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Product</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Product</span><span class=\"token punctuation\">></span></span> stream<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token annotation punctuation\">@Override</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">Iterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Product</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> stream<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Integer</span> <span class=\"token function\">getTotalPrice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> stream\n\t\t\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Product</span><span class=\"token operator\">::</span><span class=\"token function\">getPrice</span><span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token operator\">::</span><span class=\"token function\">sum</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">Iterable&lt;Product></code> 인터페이스를 구현한 Products 클래스를 정의한다.</li>\n<li><code class=\"language-text\">Iterable</code> 은 컬렉션의 구현 방법을 노출시키지 않고, 컬렉션 요소들을 접근할 수 있게 하는 패턴,인터페이스다.</li>\n<li><code class=\"language-text\">Iterable</code> 인터페이스를 구현하면 <code class=\"language-text\">for-each</code> 문 사용이 가능해지고, <code class=\"language-text\">Iterable</code> 를 통해 Products 래퍼클래스의 요소들을 순회할 수 있게 하였다.</li>\n</ul>\n<h2>4. Spring Data JPA 와의 연동</h2>\n<ul>\n<li>Spring Data JPA 에서 위와 같은 패턴을 구현하려면 Spring Data JPA에 메서드 이름의 키워드를 보고 자동으로 쿼리 메서드를 만들어주는 Query Method 기능과 연동되어야 한다.</li>\n<li>다행히 Spring Data JPA 에는 Query Method 에서는 여러 반환값을 지원하고 있으며, Streamable 인터페이스를 구현한 클래스를 반환값으로 받을 수 있다.</li>\n<li>\n<p>여기서는 <code class=\"language-text\">ProductsSCO</code> <code class=\"language-text\">(Spring Collection Object)</code> 라고 네이밍하였다.</p>\n<ul>\n<li><code class=\"language-text\">Streamable</code> 인터페이스가 Spring Data 모듈의 의존성을 가지기 때문에 때문에 도메인 Wrapper 클래스와 분리하기 목적으로 분리하였다.</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token import\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span></span><span class=\"token class-name\">Streamable</span></span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ProductsSCO</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Streamable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Product</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Streamable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Product</span><span class=\"token punctuation\">></span></span> streamable<span class=\"token punctuation\">;</span>\n\n  <span class=\"token annotation punctuation\">@Override</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">Iterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Product</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> streamable<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  \t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Products</span> <span class=\"token function\">toProducts</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Products</span><span class=\"token punctuation\">(</span>streamable<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">ProductJpaRepository</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">JpaRepository</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Product</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Long</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\">ProductsSCO</span> <span class=\"token function\">findByPriceGreaterThan</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">ProductJpaRepository</code> 에 반환값이 Streamable 인터페이스를 구현한 <code class=\"language-text\">ProductsSCO</code> 래퍼 클래스 인 것을 볼 수 있다.</li>\n<li>다만, 한계가 있는데 <code class=\"language-text\">List&lt;T> findAll()</code> 과 같은 메서드들은 이미 <code class=\"language-text\">JpaRepository</code>에서 정의되기 때문에 <code class=\"language-text\">Products findAll()</code> 과 같은 형태로 재정의 할 수 없다.</li>\n<li>-</li>\n</ul>\n<h2>5. Collection Wrapper 클래스를 적용한 전체 코드</h2>\n<ul>\n<li>먼저 도메인 모듈의 Spring에 대한 의존성을 분리하기 위해, domain 패키지와 springboot 패키지를 두었다.</li>\n</ul>\n<h3>domain 패키지</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Getter</span>\n<span class=\"token annotation punctuation\">@Entity</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Product</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token annotation punctuation\">@Id</span> <span class=\"token annotation punctuation\">@GeneratedValue</span><span class=\"token punctuation\">(</span>strategy <span class=\"token operator\">=</span> <span class=\"token class-name\">GenerationType</span><span class=\"token punctuation\">.</span><span class=\"token constant\">IDENTITY</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">Long</span> id<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">Integer</span> price<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">ProductRepository</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token class-name\">Products</span> <span class=\"token function\">findByPriceGreaterThan</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@RequiredArgsConstructor</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Products</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Iterable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Product</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Stream</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Product</span><span class=\"token punctuation\">></span></span> stream<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token annotation punctuation\">@Override</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">Iterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Product</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> stream<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Integer</span> <span class=\"token function\">getTotalPrice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> stream\n\t\t\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Product</span><span class=\"token operator\">::</span><span class=\"token function\">getPrice</span><span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Integer</span><span class=\"token operator\">::</span><span class=\"token function\">sum</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Service</span>\n<span class=\"token annotation punctuation\">@RequiredArgsConstructor</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ProductService</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">ProductRepository</span> productRepository<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Integer</span> <span class=\"token function\">getTotalPrice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">final</span> <span class=\"token keyword\">var</span> products <span class=\"token operator\">=</span> productRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findByPriceGreaterThan</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token keyword\">return</span> products<span class=\"token punctuation\">.</span><span class=\"token function\">getTotalPrice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>springboot 패키지</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">ProductJpaRepository</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">JpaRepository</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Product</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Long</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token class-name\">ProductsSCO</span> <span class=\"token function\">findByPriceGreaterThan</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Integer</span> price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@RequiredArgsConstructor</span>\n<span class=\"token annotation punctuation\">@Repository</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ProductRepositoryImpl</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">ProductRepository</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">ProductJpaRepository</span> productJpaRepository<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token annotation punctuation\">@Override</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">Products</span> <span class=\"token function\">findByPriceGreaterThan</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">Integer</span> price<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">final</span> <span class=\"token keyword\">var</span> productsSCO <span class=\"token operator\">=</span> productJpaRepository<span class=\"token punctuation\">.</span><span class=\"token function\">findByPriceGreaterThan</span><span class=\"token punctuation\">(</span>price<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> productsSCO<span class=\"token punctuation\">.</span><span class=\"token function\">toProducts</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@RequiredArgsConstructor</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ProductsSCO</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Streamable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Product</span><span class=\"token punctuation\">></span></span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">Streamable</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Product</span><span class=\"token punctuation\">></span></span> streamable<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token annotation punctuation\">@Override</span> <span class=\"token keyword\">public</span> <span class=\"token class-name\">Iterator</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Product</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> streamable<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Products</span> <span class=\"token function\">toProducts</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Products</span><span class=\"token punctuation\">(</span>streamable<span class=\"token punctuation\">.</span><span class=\"token function\">stream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2><strong>6. 참조</strong></h2>\n<p><a href=\"https://docs.spring.io/spring-data/jpa/docs/current/reference/html/#repositories.collections-and-iterables.streamable-wrapper\">Spring Data JPA - Reference Documentation</a></p>","frontmatter":{"title":"엔티티 컬렉션을 객체지향적으로 다뤄보자!","date":"June 23, 2023","update":"June 23, 2023","tags":["스프링"],"series":null},"fields":{"slug":"/java-collection-wrapper/","readingTime":{"minutes":5.84}}},"seriesList":{"edges":[{"node":{"id":"bad021b0-8468-5808-8daa-8cf3434c19ae","fields":{"slug":"/ch1/"},"frontmatter":{"title":"1장 - 신뢰할 수 있고 확장 가능하며 유지보수하기 쉬운 애플리케이션"}}},{"node":{"id":"1c3bf38a-5822-589b-ae08-5e0182388d1a","fields":{"slug":"/ch2/"},"frontmatter":{"title":"2장 - 데이터 모델과 질의 언어"}}},{"node":{"id":"68b667f0-fbb0-5312-bba3-7728df4a1d74","fields":{"slug":"/ch3/"},"frontmatter":{"title":"3장 - 저장소와 검색"}}},{"node":{"id":"22d5ddb1-57c0-5f00-8699-cefd462d1666","fields":{"slug":"/ch4/"},"frontmatter":{"title":"4장 - 부호화와 발전"}}},{"node":{"id":"137b1767-6e4e-5fdf-a9f9-0b3798cbe37e","fields":{"slug":"/ch5/"},"frontmatter":{"title":"5장 - 복제"}}},{"node":{"id":"7a8cd6aa-bb6e-55b4-9854-4288e54769ee","fields":{"slug":"/ch6/"},"frontmatter":{"title":"6장 - 파티셔닝"}}},{"node":{"id":"0d8cea97-6f8f-5e28-b4ad-7e48cc2d2e46","fields":{"slug":"/ch7/"},"frontmatter":{"title":"7장 - 트랜잭션"}}},{"node":{"id":"645ed70a-de7e-58f4-a2a3-cb643a99e30a","fields":{"slug":"/ch8/"},"frontmatter":{"title":"8장 - 분산 시스템의 골칫거리"}}},{"node":{"id":"0cf94437-bd98-5772-bde9-914727aa343e","fields":{"slug":"/ch1/"},"frontmatter":{"title":"1부 - 성능 기초"}}},{"node":{"id":"130946b3-e281-5f87-8dd1-cef00be4a774","fields":{"slug":"/ch2/"},"frontmatter":{"title":"2부 - 성능 개선"}}},{"node":{"id":"34735664-ed59-5784-a071-1227717349e3","fields":{"slug":"/ch3/"},"frontmatter":{"title":"3부 - 화면 응답시간 분석"}}},{"node":{"id":"a2c4d2d8-b012-5449-9251-3bcc368876ea","fields":{"slug":"/ch4/"},"frontmatter":{"title":"4부 - 프로세스 이해하기"}}},{"node":{"id":"ee53721c-3561-5f47-9065-76762ebce369","fields":{"slug":"/ch5/"},"frontmatter":{"title":"5부 - 소스코드 최적화"}}},{"node":{"id":"0ee045de-1f2e-5326-840b-f7513c16f2d7","fields":{"slug":"/ch6/"},"frontmatter":{"title":"6부 - SQL 최적화"}}},{"node":{"id":"b3880869-c0db-5d58-948e-92985250cf2d","fields":{"slug":"/ch7/"},"frontmatter":{"title":"7부 - 애플리케이션 입장에서의 SQL 튜닝"}}},{"node":{"id":"cf31c6e7-91a8-55a7-beea-5dca2e2460fa","fields":{"slug":"/spring-autoconfigure/"},"frontmatter":{"title":"SpringBoot AutoConfiguration 시작하기"}}},{"node":{"id":"bbcc04f9-2935-5753-9a7e-cd8fdfcc662c","fields":{"slug":"/behavior/"},"frontmatter":{"title":"디자인 패턴 - 행동 패턴"}}},{"node":{"id":"f3e9b018-dcf2-5066-be00-909086dcbff2","fields":{"slug":"/struct/"},"frontmatter":{"title":"디자인 패턴 - 구조 패턴"}}},{"node":{"id":"d7818847-fabd-52c1-94c6-4907e05a3490","fields":{"slug":"/create/"},"frontmatter":{"title":"디자인 패턴 - 생성 패턴"}}},{"node":{"id":"c7e63a70-6b62-52e8-ac0f-d5dcdecd7147","fields":{"slug":"/Exactly_Once_Semantics/"},"frontmatter":{"title":"카프카는 어떻게 Exactly-Once Semantics 보장하나?"}}},{"node":{"id":"1cda8db3-a1d2-56f9-85e0-29bac23a0650","fields":{"slug":"/trasaction_in_kafka/"},"frontmatter":{"title":"카프카에서의 Transactions"}}},{"node":{"id":"09549337-253c-501f-ba42-533815a37e3c","fields":{"slug":"/\benabling_exactly_once_kafka_streams/"},"frontmatter":{"title":"카프카 스트림즈의 정확히 한 번"}}},{"node":{"id":"3dcd2238-18eb-57ef-9cd3-c0177a3c1954","fields":{"slug":"/Amazon SQS Deep Dive/"},"frontmatter":{"title":"Amazon SQS 딥다이브"}}},{"node":{"id":"d814ac35-d925-5139-ac77-ee416f12dbcb","fields":{"slug":"/Spring Cloud AWS Messaging Module Best Practice/"},"frontmatter":{"title":"Spring Cloud AWS Messaging 모듈 문제점 및 튜닝"}}},{"node":{"id":"ff41f5b0-73ba-5595-aebb-35db1d98dc0b","fields":{"slug":"/java-collection-wrapper/"},"frontmatter":{"title":"엔티티 컬렉션을 객체지향적으로 다뤄보자!"}}},{"node":{"id":"814be12c-5d81-5869-910d-04f5c3fce410","fields":{"slug":"/spring-cache-hierarchy/"},"frontmatter":{"title":"Spring Cache 로 캐시 계층 구조 사용하기"}}},{"node":{"id":"784bc412-aba6-543c-bf75-23eaddb9ed64","fields":{"slug":"/redis-event-notifications/"},"frontmatter":{"title":"Redis Keyspace Notifications에 대해 알아보자"}}},{"node":{"id":"d488972a-385d-5d13-bbfe-08c074fa8372","fields":{"slug":"/jpa-slow-cause/"},"frontmatter":{"title":"JPA가 느릴 수 밖에 없는 원초적인 이유"}}},{"node":{"id":"2dd75ae1-e168-5f46-a340-b7f8dd712d7a","fields":{"slug":"/ehcache3/"},"frontmatter":{"title":"Ehcache3 캐시 라이브러리 소개 (with Spring Boot)"}}},{"node":{"id":"2db7d058-3179-54bf-ac47-0b4f61b8e897","fields":{"slug":"/mysql-primary-key-design/"},"frontmatter":{"title":"고성능을 위한 MySQL Primary Key 설계 전략"}}},{"node":{"id":"8622c7e6-724a-5cab-8d8a-0a77578d18e5","fields":{"slug":"/java-concurrency/"},"frontmatter":{"title":"Java의 동시성 프로그래밍"}}}]},"previous":{"fields":{"slug":"/Spring Cloud AWS Messaging Module Best Practice/"},"frontmatter":{"title":"Spring Cloud AWS Messaging 모듈 문제점 및 튜닝"}},"next":{"fields":{"slug":"/spring-cache-hierarchy/"},"frontmatter":{"title":"Spring Cache 로 캐시 계층 구조 사용하기"}}},"pageContext":{"id":"ff41f5b0-73ba-5595-aebb-35db1d98dc0b","series":null,"previousPostId":"d814ac35-d925-5139-ac77-ee416f12dbcb","nextPostId":"814be12c-5d81-5869-910d-04f5c3fce410"}},"staticQueryHashes":[],"slicesMap":{}}