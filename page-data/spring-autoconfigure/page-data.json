{"componentChunkName":"component---src-templates-post-jsx","path":"/spring-autoconfigure/","result":{"data":{"site":{"siteMetadata":{"title":"SOOLAB"}},"markdownRemark":{"id":"ee7cb342-656e-5cd3-be5d-4653460c2679","excerpt":"@EnableAutoConfiguration Spring Boot 애플리케이션이 시작되면 spring-boot-autoconfigure 모듈에 미리 정의된 Configuration 클래스들이 자동으로 구성됩니다. (스프링 부트 자동 구성 목록) Auto Configuration이 실제 실행되는지 여부는 클래스 경로에 종속 클래스가 있는지 여부에 따라 달라…","html":"<h2>@EnableAutoConfiguration</h2>\n<p>Spring Boot 애플리케이션이 시작되면 spring-boot-autoconfigure 모듈에 미리 정의된 Configuration 클래스들이 자동으로 구성됩니다. (<a href=\"https://docs.spring.io/spring-boot/docs/current/reference/html/auto-configuration-classes.html#appendix.auto-configuration-classes\">스프링 부트 자동 구성 목록</a>)</p>\n<p>Auto Configuration이 실제 실행되는지 여부는 클래스 경로에 종속 클래스가 있는지 여부에 따라 달라집니다.</p>\n<p>예를 들어, <code class=\"language-text\">@ConditionalOnClass</code> 는 클래스 패스에 특정 class가 존재할 때만 조건이 만족됩니다.</p>\n<!-- more -->\n<h2>Custom AutoConfiguration Starter 만들기</h2>\n<h3>1.  <a href=\"http://application.properties\">application.properties</a> 파일의 사용자 정의 속성</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Data</span>\n<span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token annotation punctuation\">@ConfigurationProperties</span><span class=\"token punctuation\">(</span>prefix <span class=\"token operator\">=</span> <span class=\"token string\">\"custom\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomProperties</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> message<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> url<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>@ConfigurationProperties의 접두사와 클래스 필드 이름은 <a href=\"http://application.properties\">application.properties</a> 와 맵핑됩니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">custom<span class=\"token punctuation\">.</span>message <span class=\"token operator\">=</span> hello world\ncustom<span class=\"token punctuation\">.</span>url <span class=\"token operator\">=</span> localhost</code></pre></div>\n<h3>2.  라이브러리용 빈 만들기</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Slf4j</span>\n<span class=\"token annotation punctuation\">@RequiredArgsConstructor</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomService</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">InitializingBean</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">CustomProperties</span> customProperties<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">afterPropertiesSet</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">Exception</span> <span class=\"token punctuation\">{</span>\n\t\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"CustomService init\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"message : {}\"</span><span class=\"token punctuation\">,</span> customProperties<span class=\"token punctuation\">.</span><span class=\"token function\">getMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tlog<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"url : {}\"</span><span class=\"token punctuation\">,</span> customProperties<span class=\"token punctuation\">.</span><span class=\"token function\">getUrl</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>3. AutoConfiguration</h3>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token annotation punctuation\">@EnableConfigurationProperties</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CustomProperties</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CustomAutoConfiguration</span> <span class=\"token punctuation\">{</span>\n\n\t<span class=\"token annotation punctuation\">@Bean</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">CustomService</span> <span class=\"token function\">customService</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">CustomProperties</span> customProperties<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CustomService</span><span class=\"token punctuation\">(</span>customProperties<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>4. spring.factories 파일 추가</h3>\n<p><code class=\"language-text\">src/main/resources/META-INF</code> 경로에 다음 내용을 추가합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\"><span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>boot<span class=\"token punctuation\">.</span>autoconfigure<span class=\"token punctuation\">.</span></span>EnableAutoConfiguration</span><span class=\"token operator\">=</span>\\\n<span class=\"token class-name\"><span class=\"token namespace\">com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>autoconfigure<span class=\"token punctuation\">.</span>configure<span class=\"token punctuation\">.</span></span>CustomAutoConfiguration</span></code></pre></div>\n<h3>5. AutoConfiguration 사용</h3>\n<p>스타터를 사용할 프로젝트를 만들고 pom.xml에 종속성을 추가합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>dependency<span class=\"token punctuation\">></span></span>\n      <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>groupId<span class=\"token punctuation\">></span></span>com<span class=\"token punctuation\">.</span>example<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>groupId<span class=\"token operator\">></span>\n      <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>artifactId<span class=\"token punctuation\">></span></span>auto<span class=\"token operator\">-</span>configure<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>artifactId<span class=\"token operator\">></span>\n      <span class=\"token generics\"><span class=\"token punctuation\">&lt;</span>version<span class=\"token punctuation\">></span></span><span class=\"token number\">0.0</span><span class=\"token number\">.1</span><span class=\"token operator\">-</span><span class=\"token constant\">SNAPSHOT</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>version<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>dependency<span class=\"token operator\">></span></code></pre></div>\n<p><a href=\"http://application.properties\">application.properties</a> 파일에 사용자 정의 속성을 정의하고 프로젝트를 시작하면 다음과 같이 빈이 초기화되는 것을 볼 수 있습니다.</p>","frontmatter":{"title":"SpringBoot AutoConfiguration 시작하기","date":"March 28, 2022","update":"March 28, 2022","tags":["스프링"],"series":null},"fields":{"slug":"/spring-autoconfigure/","readingTime":{"minutes":1.805}}},"seriesList":{"edges":[{"node":{"id":"22d07d7d-18ae-5140-b700-6afb8adda7b0","fields":{"slug":"/ch1/"},"frontmatter":{"title":"1장 - 신뢰할 수 있고 확장 가능하며 유지보수하기 쉬운 애플리케이션"}}},{"node":{"id":"897d9a67-24a9-59f9-aa19-71033b5e1d1b","fields":{"slug":"/ch2/"},"frontmatter":{"title":"2장 - 데이터 모델과 질의 언어"}}},{"node":{"id":"c8e0da18-c3be-553e-92d5-2598a0e1ce83","fields":{"slug":"/ch3/"},"frontmatter":{"title":"3장 - 저장소와 검색"}}},{"node":{"id":"0684164d-667c-51a2-8c58-1517361a3243","fields":{"slug":"/ch4/"},"frontmatter":{"title":"4장 - 부호화와 발전"}}},{"node":{"id":"69cde3d4-8b44-5506-8844-24bbd20c63d5","fields":{"slug":"/ch5/"},"frontmatter":{"title":"5장 - 복제"}}},{"node":{"id":"9f4be72d-62c9-5907-ba92-3d88715e7a4f","fields":{"slug":"/ch6/"},"frontmatter":{"title":"6장 - 파티셔닝"}}},{"node":{"id":"fd027b15-4c0d-57eb-9a84-759fecdf0b78","fields":{"slug":"/ch7/"},"frontmatter":{"title":"7장 - 트랜잭션"}}},{"node":{"id":"ac932910-ca71-56ae-97f7-d15ae2381418","fields":{"slug":"/ch8/"},"frontmatter":{"title":"8장 - 분산 시스템의 골칫거리"}}},{"node":{"id":"58455aee-c340-51cf-bceb-fd42ca376fad","fields":{"slug":"/ch1/"},"frontmatter":{"title":"1부 - 성능 기초"}}},{"node":{"id":"4cd5e006-e9a2-592b-bc8d-651df314e59f","fields":{"slug":"/ch2/"},"frontmatter":{"title":"2부 - 성능 개선"}}},{"node":{"id":"0199b798-4206-53ca-8a5a-9aa4e624e298","fields":{"slug":"/ch3/"},"frontmatter":{"title":"3부 - 화면 응답시간 분석"}}},{"node":{"id":"4b9ae8f4-7e36-5896-9039-22197a562eff","fields":{"slug":"/ch4/"},"frontmatter":{"title":"4부 - 프로세스 이해하기"}}},{"node":{"id":"b86e7bae-198c-525a-bf53-9fb35db1afe6","fields":{"slug":"/ch5/"},"frontmatter":{"title":"5부 - 소스코드 최적화"}}},{"node":{"id":"bed09d78-b4be-5a64-9f97-ab30e9aac901","fields":{"slug":"/ch6/"},"frontmatter":{"title":"6부 - SQL 최적화"}}},{"node":{"id":"b34bff9b-e0ee-5038-a4ba-b50040bcdd2a","fields":{"slug":"/ch7/"},"frontmatter":{"title":"7부 - 애플리케이션 입장에서의 SQL 튜닝"}}},{"node":{"id":"ee7cb342-656e-5cd3-be5d-4653460c2679","fields":{"slug":"/spring-autoconfigure/"},"frontmatter":{"title":"SpringBoot AutoConfiguration 시작하기"}}},{"node":{"id":"02015c5f-c992-5b88-a1a9-36f594b485b3","fields":{"slug":"/behavior/"},"frontmatter":{"title":"디자인 패턴 - 행동 패턴"}}},{"node":{"id":"5d9422ea-90e5-5337-8b1b-3466f91c8804","fields":{"slug":"/struct/"},"frontmatter":{"title":"디자인 패턴 - 구조 패턴"}}},{"node":{"id":"85677df6-b9d4-5c1d-b3e6-a9fc5564ff07","fields":{"slug":"/create/"},"frontmatter":{"title":"디자인 패턴 - 생성 패턴"}}},{"node":{"id":"d7ef20d8-74f4-5c32-93de-926edda896b5","fields":{"slug":"/Exactly_Once_Semantics/"},"frontmatter":{"title":"카프카는 어떻게 Exactly-Once Semantics 보장하나?"}}},{"node":{"id":"e7fe3cb6-4ce3-5c59-a6d0-05eef92f6505","fields":{"slug":"/trasaction_in_kafka/"},"frontmatter":{"title":"카프카에서의 Transactions"}}},{"node":{"id":"1e339f37-95b5-5510-ab63-bf6d80e6c393","fields":{"slug":"/\benabling_exactly_once_kafka_streams/"},"frontmatter":{"title":"카프카 스트림즈의 정확히 한 번"}}},{"node":{"id":"19fda853-336c-5380-8404-97d6685d50ab","fields":{"slug":"/Amazon SQS Deep Dive/"},"frontmatter":{"title":"Amazon SQS 딥다이브"}}},{"node":{"id":"b0f9150b-b03a-5207-89b9-60936e3cc578","fields":{"slug":"/Spring Cloud AWS Messaging Module Best Practice/"},"frontmatter":{"title":"Spring Cloud AWS Messaging 모듈 문제점 및 튜닝"}}},{"node":{"id":"75f3dc99-7d87-5d4e-adaa-a0066962034c","fields":{"slug":"/java-collection-wrapper/"},"frontmatter":{"title":"Collection Wrapper 클래스를 이용한 Service 계층 리팩토링 "}}},{"node":{"id":"8ad33af7-49f4-58e2-9a2b-049b9f550f96","fields":{"slug":"/spring-cache-hierarchy/"},"frontmatter":{"title":"Spring Cache 로 캐시 계층 구조 사용하기"}}},{"node":{"id":"6afadd0e-8b95-5508-87f7-3061118bbae4","fields":{"slug":"/redis-event-notifications/"},"frontmatter":{"title":"Redis Keyspace Notifications에 대해 알아보자"}}},{"node":{"id":"11ea05ce-4446-5775-bf6e-c3477d42d7c1","fields":{"slug":"/jpa-slow-cause/"},"frontmatter":{"title":"JPA가 느릴 수 밖에 없는 원초적인 이유"}}},{"node":{"id":"9b9bd5ca-dfcc-5d38-b278-1f205d612517","fields":{"slug":"/ehcache3/"},"frontmatter":{"title":"Ehcache3 캐시 라이브러리 소개 (with Spring Boot)"}}},{"node":{"id":"521d39b1-1b0f-58ed-98fd-4c9acece72d3","fields":{"slug":"/mysql-primary-key-design/"},"frontmatter":{"title":"고성능을 위한 MySQL Primary Key 설계 전략"}}},{"node":{"id":"96d8ea29-f513-54c2-93b3-26142a0ce1fc","fields":{"slug":"/tomcat/"},"frontmatter":{"title":"Apache Tomcat 이해하기(NIO Connector 중심)"}}},{"node":{"id":"3ffd46b0-5607-5617-bd21-e384edcf6c2b","fields":{"slug":"/socket_option/"},"frontmatter":{"title":"Java의 Socket Option 정리"}}},{"node":{"id":"b21ac7fc-284e-5536-bdc7-1705a044f58b","fields":{"slug":"/java-nio-buffer/"},"frontmatter":{"title":"Java NIO 파헤치기 - Buffer"}}},{"node":{"id":"827c7ba6-09c2-5240-a88e-499013d65833","fields":{"slug":"/tomcat-connection/"},"frontmatter":{"title":"Tomcat은 어떻게 Connection을 관리할까?"}}},{"node":{"id":"0d7d38a2-3c38-586d-a50b-6c6164ba47fd","fields":{"slug":"/spring-core-container/"},"frontmatter":{"title":"스프링으로 알아보는 IoC 컨테이너의 원리와 이해"}}}]},"previous":{"fields":{"slug":"/ch7/"},"frontmatter":{"title":"7부 - 애플리케이션 입장에서의 SQL 튜닝"}},"next":{"fields":{"slug":"/behavior/"},"frontmatter":{"title":"디자인 패턴 - 행동 패턴"}}},"pageContext":{"id":"ee7cb342-656e-5cd3-be5d-4653460c2679","series":null,"previousPostId":"b34bff9b-e0ee-5038-a4ba-b50040bcdd2a","nextPostId":"02015c5f-c992-5b88-a1a9-36f594b485b3"}},"staticQueryHashes":[],"slicesMap":{}}