{"componentChunkName":"component---src-templates-post-pagination-jsx","path":"/page/1/","result":{"data":{"paging":{"group":[{"fieldValue":"Java","totalCount":7},{"fieldValue":"Tomcat","totalCount":2},{"fieldValue":"스프링","totalCount":1}],"nodes":[{"excerpt":"Selector Buffer 편에서도 보았듯이, java.nio 는 기존 Java I/O의 한계를 극복하기 위해서 탄생되었다. \nC/C++의 경우에는 이미 POSIX 계열 OS의 select()나 poll() 같은 시스템 호출로 멀티플렉싱을 구현하였지만 기존 Java I/O는 이를 사용할 수 없었다. Selector는 멀티플렉싱 I/O를 가능하게 한다. …","fields":{"slug":"/java-nio-selector/"},"frontmatter":{"date":"October 19, 2023","update":"Oct 19, 2023","title":"Java NIO - Selector","description":null,"tags":["Java"]}},{"excerpt":"Channel Channel은 파일이나 소켓과 같은 엔티티 간에 데이터를 효율적으로 전송하는 통로이다.\n채널은 일반적으로 운영체제의 파일 디스크립터나 핸들러와 일대일 관계를 가진다.\n채널은 Java의 플랫폼 독립성을 유지하면서도 운영 체제의 네이티브 I/O 기능에 대한 추상화를 제공한다. 아래 그림은 Channel 클래스의 상속관계를 나타낸다.  계층구조…","fields":{"slug":"/java-nio-channel/"},"frontmatter":{"date":"October 14, 2023","update":"Oct 14, 2023","title":"Java NIO - Channel","description":null,"tags":["Java"]}},{"excerpt":"What is Light-Weight Container? 애플리케이션 코드가 실행되는 프레임워크를 의미한다. 애플리케이션 객체(대부분 비즈니스 객체)는 컨테이너 내부에서 실행되며 컨테이너에 의해 관리된다고 한다. 다음은 경량 컨테이너가 가지는 특징들이다. 비침투성 (Non-invasiveness): 이는 애플리케이션 코드에 특별한 의존성을 부과하지 않는 …","fields":{"slug":"/spring-core-container/"},"frontmatter":{"date":"October 11, 2023","update":"Oct 11, 2023","title":"스프링으로 알아보는 IoC 컨테이너의 원리와 이해","description":null,"tags":["스프링"]}},{"excerpt":"개요 지난 게시물에서는 Tomcat의 아키텍처와 클라이언트와의 연결 방식, 그리고 요청 처리 메커니즘에 대해 알아보았다.\n특히, NIO Connector의 Selector를 활용한 이벤트 루프 처리 방식은 BIO Connector에 비해 훨씬 더 많은 연결을 효율적으로 관리하면서 요청을 처리할 수 있게 만들었다. 이번 게시물에서는 Tomcat이 Selec…","fields":{"slug":"/tomcat-connection/"},"frontmatter":{"date":"October 07, 2023","update":"Oct 07, 2023","title":"Tomcat은 어떻게 Connection을 관리할까?","description":null,"tags":["Tomcat"]}},{"excerpt":"버퍼 I/O 운영체제의 I/O는 모두 버퍼를 통해 이루어진다. 프로세스는 버퍼에서 데이터를 채우는 (쓰기) 또는 버퍼에 데이터를 비우는 (읽기) 작업을 운영 체제에 요청함으로써 I/O를 수행한다.\n모든 데이터는 이 메커니즘을 통해 프로세스 내부로 이동하거나 나간다.\n 위 그림에서 사용자 공간(user space)과 커널 공간(kernel space)의 개…","fields":{"slug":"/java-nio-buffer/"},"frontmatter":{"date":"October 03, 2023","update":"Oct 03, 2023","title":"Java NIO - Buffer","description":null,"tags":["Java"]}},{"excerpt":"Socket Option 소켓 옵션은 자바의 Socket 클래스가 사용하는 네트워크 소켓이 데이터를 어떻게 보내고 받을 것인지를 결정한다. 자바에서는 클라이언트 측 소켓에 대해 9가지 옵션이 존재한다. TCP_NODELAY SO_BINDADDR SO_TIMEOUT SO_LINGER SO_SNDBUF SO_RCVBUF SO_KEEPALIVE OOBINLIN…","fields":{"slug":"/socket_option/"},"frontmatter":{"date":"September 29, 2023","update":"Sep 29, 2023","title":"Java의 Socket Option 정리","description":null,"tags":["Java"]}},{"excerpt":"Jakarta EE Jakarta EE(Java EE)는 기업용 애플리케이션에 필요한 기능들의 사양을 정의해둔 명세서이다.\n즉, 대규모 애플리케이션을 개발하는데 필요한 표준화된 Java API의 모음이라고 할 수 있다.\nJava API의 특징은 API를 제공하는 구현 벤더와 분리되어 있기 때문에 API를 준수한다면 플러그 형태로 구현 벤더를 교체할 수 있…","fields":{"slug":"/tomcat/"},"frontmatter":{"date":"September 26, 2023","update":"Sep 26, 2023","title":"Apache Tomcat 이해하기(NIO Connector 중심)","description":null,"tags":["Tomcat"]}},{"excerpt":"ReentrantLock 고유락(intrinsic locking, synchronized lock. monitor lock)과 달리 ReentrantLock은 폴링, 타임아웃, 인터럽트 가능한 잠금 획득을 선택할 수 있으며, 모든 잠금 및 해제 연산이 명시적이다. 아래 Lock 인터페이스는 추상적인 잠금 연산을 정의한다. ReentrantLock은 Loc…","fields":{"slug":"/java-concurrency-lock/"},"frontmatter":{"date":"September 19, 2023","update":"Sep 19, 2023","title":"Java의 동시성 프로그래밍 - Lock","description":null,"tags":["Java"]}},{"excerpt":"DeadLock 스레드 A각 잠금 L을 점유하고 있고 잠금 M을 획득하려고 시도하는 동시에 스레드 B가 잠금 M을 보유하고 있고 잠금 L을 획득하려고 시도하면 두 스레드는 영원히 대기하게 된다. 이러한 상황을 데드락이라고 한다. lock-ordering deadlocks 아래 코드는 leftRight(), rightLeft 메서드가 left, right …","fields":{"slug":"/java-concurrency-deadlock/"},"frontmatter":{"date":"September 18, 2023","update":"Sep 18, 2023","title":"Java의 동시성 프로그래밍 - Deadlock","description":null,"tags":["Java"]}},{"excerpt":"Executor Task는 논리적인 작업 단위이며, 스레드는 Task를 비동기적으로 실행할 수 있는 기술이다. Java에서는 Task 실행을 추상화하여 Executor 라는 인터페이스를 제공한다. Executor는 다양한 Task 실행 정책을 지원하는 비동기 프레임워크에 기반이 된다. Executor 구현은 통계 수집, 애플리케이션 관리 및 모니터링을 추…","fields":{"slug":"/java-concurrency-executor/"},"frontmatter":{"date":"September 17, 2023","update":"Sep 17, 2023","title":"Java의 동시성 프로그래밍 - Executor","description":null,"tags":["Java"]}}]},"totalMarkdown":{"group":[{"fieldValue":"AWS","totalCount":2},{"fieldValue":"JPA","totalCount":1},{"fieldValue":"Java","totalCount":9},{"fieldValue":"Tomcat","totalCount":2},{"fieldValue":"데이터 중심 애플리케이션 설계","totalCount":8},{"fieldValue":"데이터베이스","totalCount":1},{"fieldValue":"디자인 패턴","totalCount":3},{"fieldValue":"레디스","totalCount":1},{"fieldValue":"스프링","totalCount":5},{"fieldValue":"실무로 배우는 시스템 성능 최적화","totalCount":7},{"fieldValue":"카프카","totalCount":3}],"nodes":[{"fields":{"slug":"/java-nio-selector/"}},{"fields":{"slug":"/java-nio-channel/"}},{"fields":{"slug":"/spring-core-container/"}},{"fields":{"slug":"/tomcat-connection/"}},{"fields":{"slug":"/java-nio-buffer/"}},{"fields":{"slug":"/socket_option/"}},{"fields":{"slug":"/tomcat/"}},{"fields":{"slug":"/java-concurrency-lock/"}},{"fields":{"slug":"/java-concurrency-deadlock/"}},{"fields":{"slug":"/java-concurrency-executor/"}},{"fields":{"slug":"/java-concurrency-model/"}},{"fields":{"slug":"/java-concurrency/"}},{"fields":{"slug":"/mysql-primary-key-design/"}},{"fields":{"slug":"/ehcache3/"}},{"fields":{"slug":"/jpa-slow-cause/"}},{"fields":{"slug":"/redis-event-notifications/"}},{"fields":{"slug":"/spring-cache-hierarchy/"}},{"fields":{"slug":"/java-collection-wrapper/"}},{"fields":{"slug":"/Spring Cloud AWS Messaging Module Best Practice/"}},{"fields":{"slug":"/Amazon SQS Deep Dive/"}},{"fields":{"slug":"/\benabling_exactly_once_kafka_streams/"}},{"fields":{"slug":"/trasaction_in_kafka/"}},{"fields":{"slug":"/Exactly_Once_Semantics/"}},{"fields":{"slug":"/create/"}},{"fields":{"slug":"/struct/"}},{"fields":{"slug":"/behavior/"}},{"fields":{"slug":"/spring-autoconfigure/"}},{"fields":{"slug":"/ch7/"}},{"fields":{"slug":"/ch6/"}},{"fields":{"slug":"/ch5/"}},{"fields":{"slug":"/ch4/"}},{"fields":{"slug":"/ch3/"}},{"fields":{"slug":"/ch2/"}},{"fields":{"slug":"/ch1/"}},{"fields":{"slug":"/ch8/"}},{"fields":{"slug":"/ch7/"}},{"fields":{"slug":"/ch6/"}},{"fields":{"slug":"/ch5/"}},{"fields":{"slug":"/ch4/"}},{"fields":{"slug":"/ch3/"}},{"fields":{"slug":"/ch2/"}},{"fields":{"slug":"/ch1/"}}]}},"pageContext":{"skip":0,"totalPage":5,"currentPage":1}},"staticQueryHashes":[],"slicesMap":{}}