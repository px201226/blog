{"componentChunkName":"component---src-templates-post-jsx","path":"/redis-event-notifications/","result":{"data":{"site":{"siteMetadata":{"title":"@Soo"}},"markdownRemark":{"id":"6afadd0e-8b95-5508-87f7-3061118bbae4","excerpt":"Redis Keyspace Notifications Redis에는 키 및 값의 변경 사항을 실시간으로 수신할 수 있는 Pub/Sub 기능을 제공한다. Notifications 유형 Redis 데이터 공간에 영향을 미치는 모든 작업에 대해 다음 두 가지 유형의 이벤트가 발생된다.\n예를 들어 키를 삭제하는 명령인  이 실행되면 Redis는 다음 두 가지 명령…","html":"<h2>Redis Keyspace Notifications</h2>\n<p>Redis에는 키 및 값의 변경 사항을 실시간으로 수신할 수 있는 Pub/Sub 기능을 제공한다.</p>\n<h2>Notifications 유형</h2>\n<p>Redis 데이터 공간에 영향을 미치는 모든 작업에 대해 다음 두 가지 유형의 이벤트가 발생된다.\n예를 들어 키를 삭제하는 명령인 <code class=\"language-text\">del myKey1</code> 이 실행되면 Redis는 다음 두 가지 명령이 트리거된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"redis\"><pre class=\"language-redis\"><code class=\"language-redis\">PUBLISH __keyspace@0__:mykey1 del\nPUBLISH __keyevent@0__:del mykey1</code></pre></div>\n<p>첫번째 PUBLISH 명령은 Key 중심 이벤트로, <code class=\"language-text\">del</code>이 이벤트의 메시지고\n두번쨰 PUBLISH 명령은 명령 중심 이벤트로, <code class=\"language-text\">myKey1</code>이 이벤트의 메시지이다.\nSub 하는 쪽에서는 Subscribe 패턴 매칭을 통해서 두 가지 유형 중 관심있는 이벤트만 선택해서 알림을 받을 수 있다.</p>\n<!-- more -->\n<h2>Redis Keyspace Notifications 설정</h2>\n<p>기본적으로 Keyspace Notifications은 비활성화되어 있기 때문에, <code class=\"language-text\">redis.conf</code> 또는 <code class=\"language-text\">CONFIG SET</code> 명령어로 <code class=\"language-text\">notify-keyspace-events</code> 옵션을 활성화 할 수 있다.\n옵션에는 다음 값들이 있다.\n이벤트 종류</p>\n<ul>\n<li>K   Keyspace events, publish prefix \"<strong>keyspace@<db></strong>:\".</li>\n<li>E   Keyevent events, publish prefix \"<strong>keyevent@<db></strong>:\".</li>\n<li>g   공통 명령: del, expire, rename, ...</li>\n<li>$   스트링(String) 명령</li>\n<li>l   리스트(List) 명령</li>\n<li>s   셋(Set) 명령</li>\n<li>h   해시(Hash) 명령</li>\n<li>z   소트 셋(Sorted set) 명령</li>\n<li>x   만료(Expired) 이벤트 (키가 만료될 때마다 생성되는 이벤트)</li>\n<li>e   퇴출(Evicted) 이벤트 (최대메모리 정책으로 키가 삭제될 때 생성되는 이벤트)</li>\n<li>A   모든 이벤트(g$lshzxe), \"AKE\"로 지정하면 모든 이벤트를 받는다.</li>\n</ul>\n<p>여기서 K 또는 E는 필수적으로 있어야 하며, 나머지 값들은 선택적으로 설정할 수 있다.\n예를 들어, 어떤 Key가 Expire되는지만 수신하고 싶다면 아래와 같이 설정하면 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">notify-keyspace-events \"Kx\": 키 이벤트 + 만료 이벤트 발생</code></pre></div>\n<p>Redis 명령에 따른 이벤트 종류를 보고 싶다면 <a href=\"https://redis.io/docs/manual/keyspace-notifications/\">공식문서</a>를 참조하자.</p>\n<h2>성능 측정</h2>\n<p>notify-keyspace-events 옵션을 모두 활성화 했을떄, 비활성화 했을 때 각가 redis-benchmark 를 통해 퍼모먼스를 테스트해보자.</p>\n<h3>notify-keyspace-events \"\" 모든 이벤트 비활성화</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"># redis-cli config set notify-keyspace-events \"\"\n# redis-benchmark -q </code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">PING_INLINE: 3670.67 requests per second, p50=12.391 msec\nPING_MBULK: 3668.78 requests per second, p50=12.551 msec\nSET: 4601.72 requests per second, p50=9.087 msec\nGET: 4604.90 requests per second, p50=8.999 msec\nINCR: 4708.98 requests per second, p50=8.847 msec\nLPUSH: 4750.14 requests per second, p50=8.847 msec\nRPUSH: 4620.86 requests per second, p50=8.967 msec\nLPOP: 3531.82 requests per second, p50=13.231 msec\nRPOP: 3863.84 requests per second, p50=12.007 msec\nSADD: 4677.05 requests per second, p50=8.775 msec\nHSET: 4795.01 requests per second, p50=8.743 msec\nSPOP: 3689.49 requests per second, p50=12.087 msec\nZADD: 3968.57 requests per second, p50=10.575 msec\nZPOPMIN: 3116.62 requests per second, p50=15.095 msec\nLPUSH (needed to benchmark LRANGE): 3900.31 requests per second, p50=10.743 msec\nLRANGE_100 (first 100 elements): 4876.86 requests per second, p50=8.343 msec\nLRANGE_300 (first 300 elements): 3725.23 requests per second, p50=12.071 msec\nLRANGE_500 (first 500 elements): 2396.59 requests per second, p50=20.159 msec\nLRANGE_600 (first 600 elements): 2067.31 requests per second, p50=23.663 msec\nMSET (10 keys): 4288.53 requests per second, p50=9.711 msec</code></pre></div>\n<h3>notify-keyspace-events AKE 모든 이벤트 활성화</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"># redis-cli config set notify-keyspace-events AKE\n# redis-benchmark -q </code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">PING_INLINE: 3299.57 requests per second, p50=14.319 msec\nPING_MBULK: 3115.85 requests per second, p50=15.039 msec\nSET: 3974.25 requests per second, p50=10.399 msec\nGET: 3828.19 requests per second, p50=10.959 msec\nINCR: 3869.07 requests per second, p50=10.791 msec\nLPUSH: 3835.24 requests per second, p50=11.095 msec\nRPUSH: 4118.96 requests per second, p50=10.247 msec\nLPOP: 3102.89 requests per second, p50=14.991 msec\nRPOP: 3178.03 requests per second, p50=14.895 msec\nSADD: 3834.94 requests per second, p50=10.983 msec\nHSET: 3825.41 requests per second, p50=11.111 msec\nSPOP: 3389.03 requests per second, p50=13.735 msec\nZADD: 3750.94 requests per second, p50=11.207 msec\nZPOPMIN: 3117.69 requests per second, p50=14.855 msec\nLPUSH (needed to benchmark LRANGE): 3835.68 requests per second, p50=11.103 msec\nLRANGE_100 (first 100 elements): 4953.68 requests per second, p50=8.247 msec\nLRANGE_300 (first 300 elements): 3687.04 requests per second, p50=12.079 msec\nLRANGE_500 (first 500 elements): 2410.28 requests per second, p50=20.191 msec\nLRANGE_600 (first 600 elements): 2059.44 requests per second, p50=23.647 msec\nMSET (10 keys): 4043.02 requests per second, p50=10.143 msec</code></pre></div>\n<p>p50 응답시간은 큰 차이가 없지만 초당 request 처리가 100~500 정도 줄어든 것을 볼 수 있다.<br>\n따라서, 이벤트 수신이 필요없다면 redis의 해당 설정은 비활성화하는 것이 리소스를 효율적으로 쓰는데 도움이 될 것 이다.\n옵션을 활성화하더라도 꼭 필요한 이벤트 유형 옵션만 설정하는 것이 좋다.</p>\n<h2>스프링 부트 설정</h2>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Configuration</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RedisConfig</span> <span class=\"token punctuation\">{</span>\n\n\n\t<span class=\"token annotation punctuation\">@Bean</span><span class=\"token punctuation\">(</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"redisMessageTaskExecutor\"</span><span class=\"token punctuation\">)</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">Executor</span> <span class=\"token function\">redisMessageTaskExecutor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">ThreadPoolTaskExecutor</span> threadPoolTaskExecutor <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadPoolTaskExecutor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tthreadPoolTaskExecutor<span class=\"token punctuation\">.</span><span class=\"token function\">setCorePoolSize</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n\t\tthreadPoolTaskExecutor<span class=\"token punctuation\">.</span><span class=\"token function\">setMaxPoolSize</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> threadPoolTaskExecutor<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token annotation punctuation\">@Bean</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">RedisMessageListenerContainer</span> <span class=\"token class-name\">RedisMessageListener</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RedisConnectionFactory</span> connectionFactory<span class=\"token punctuation\">,</span> <span class=\"token class-name\">RedisMessageListener</span> redisMessageListener<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">RedisMessageListenerContainer</span> container <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RedisMessageListenerContainer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tcontainer<span class=\"token punctuation\">.</span><span class=\"token function\">setConnectionFactory</span><span class=\"token punctuation\">(</span>connectionFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tcontainer<span class=\"token punctuation\">.</span><span class=\"token function\">addMessageListener</span><span class=\"token punctuation\">(</span>redisMessageListener<span class=\"token punctuation\">,</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PatternTopic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"*\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tcontainer<span class=\"token punctuation\">.</span><span class=\"token function\">setTaskExecutor</span><span class=\"token punctuation\">(</span><span class=\"token function\">asyncThreadTaskExecutor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> container<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token annotation punctuation\">@Bean</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">RedisTemplate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">redisTemplate</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">RedisConnectionFactory</span> connectionFactory<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">RedisTemplate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">></span></span> redisTemplate <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RedisTemplate</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tredisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">setConnectionFactory</span><span class=\"token punctuation\">(</span>connectionFactory<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tredisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">setKeySerializer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">StringRedisSerializer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tredisTemplate<span class=\"token punctuation\">.</span><span class=\"token function\">setValueSerializer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">StringRedisSerializer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> redisTemplate<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RedisMessageListener</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">MessageListener</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">final</span> <span class=\"token class-name\">List</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">CacheManager</span><span class=\"token punctuation\">></span></span> cacheManagerList<span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">onMessage</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">final</span> <span class=\"token class-name\">Message</span> message<span class=\"token punctuation\">,</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">byte</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> pattern<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        log<span class=\"token punctuation\">.</span><span class=\"token function\">info</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"{}\"</span><span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>RedisMessageListenerContainer 빈 등록 시, 주의할 점은 setTaskExecutor() 로 스레드풀을 사용하는 Executor를 등록해야 한다.<br>\nsetTaskExecutor()로 Executor를 등록하지 않으면 RedisMessageListenerContainer는 기본값으로 SimpleAsyncTaskExecutor가 사용되는데,\nSimpleAsyncTaskExecutor 는 사용될 때 마다, 새로운 스레드를 만들어서 run() 하기 때문에 Redis에서 이벤트가 수신될 때 마다 새로운 스레드가 만들어지므로 주의하자.</p>","frontmatter":{"title":"Redis Keyspace Notifications에 대해 알아보자","date":"July 19, 2023","update":"July 19, 2023","tags":["레디스"],"series":null},"fields":{"slug":"/redis-event-notifications/","readingTime":{"minutes":6.135}}},"seriesList":{"edges":[{"node":{"id":"22d07d7d-18ae-5140-b700-6afb8adda7b0","fields":{"slug":"/ch1/"},"frontmatter":{"title":"1장 - 신뢰할 수 있고 확장 가능하며 유지보수하기 쉬운 애플리케이션"}}},{"node":{"id":"897d9a67-24a9-59f9-aa19-71033b5e1d1b","fields":{"slug":"/ch2/"},"frontmatter":{"title":"2장 - 데이터 모델과 질의 언어"}}},{"node":{"id":"c8e0da18-c3be-553e-92d5-2598a0e1ce83","fields":{"slug":"/ch3/"},"frontmatter":{"title":"3장 - 저장소와 검색"}}},{"node":{"id":"0684164d-667c-51a2-8c58-1517361a3243","fields":{"slug":"/ch4/"},"frontmatter":{"title":"4장 - 부호화와 발전"}}},{"node":{"id":"69cde3d4-8b44-5506-8844-24bbd20c63d5","fields":{"slug":"/ch5/"},"frontmatter":{"title":"5장 - 복제"}}},{"node":{"id":"9f4be72d-62c9-5907-ba92-3d88715e7a4f","fields":{"slug":"/ch6/"},"frontmatter":{"title":"6장 - 파티셔닝"}}},{"node":{"id":"fd027b15-4c0d-57eb-9a84-759fecdf0b78","fields":{"slug":"/ch7/"},"frontmatter":{"title":"7장 - 트랜잭션"}}},{"node":{"id":"ac932910-ca71-56ae-97f7-d15ae2381418","fields":{"slug":"/ch8/"},"frontmatter":{"title":"8장 - 분산 시스템의 골칫거리"}}},{"node":{"id":"58455aee-c340-51cf-bceb-fd42ca376fad","fields":{"slug":"/ch1/"},"frontmatter":{"title":"1부 - 성능 기초"}}},{"node":{"id":"4cd5e006-e9a2-592b-bc8d-651df314e59f","fields":{"slug":"/ch2/"},"frontmatter":{"title":"2부 - 성능 개선"}}},{"node":{"id":"0199b798-4206-53ca-8a5a-9aa4e624e298","fields":{"slug":"/ch3/"},"frontmatter":{"title":"3부 - 화면 응답시간 분석"}}},{"node":{"id":"4b9ae8f4-7e36-5896-9039-22197a562eff","fields":{"slug":"/ch4/"},"frontmatter":{"title":"4부 - 프로세스 이해하기"}}},{"node":{"id":"b86e7bae-198c-525a-bf53-9fb35db1afe6","fields":{"slug":"/ch5/"},"frontmatter":{"title":"5부 - 소스코드 최적화"}}},{"node":{"id":"bed09d78-b4be-5a64-9f97-ab30e9aac901","fields":{"slug":"/ch6/"},"frontmatter":{"title":"6부 - SQL 최적화"}}},{"node":{"id":"b34bff9b-e0ee-5038-a4ba-b50040bcdd2a","fields":{"slug":"/ch7/"},"frontmatter":{"title":"7부 - 애플리케이션 입장에서의 SQL 튜닝"}}},{"node":{"id":"ee7cb342-656e-5cd3-be5d-4653460c2679","fields":{"slug":"/spring-autoconfigure/"},"frontmatter":{"title":"SpringBoot AutoConfiguration 시작하기"}}},{"node":{"id":"02015c5f-c992-5b88-a1a9-36f594b485b3","fields":{"slug":"/behavior/"},"frontmatter":{"title":"디자인 패턴 - 행동 패턴"}}},{"node":{"id":"5d9422ea-90e5-5337-8b1b-3466f91c8804","fields":{"slug":"/struct/"},"frontmatter":{"title":"디자인 패턴 - 구조 패턴"}}},{"node":{"id":"85677df6-b9d4-5c1d-b3e6-a9fc5564ff07","fields":{"slug":"/create/"},"frontmatter":{"title":"디자인 패턴 - 생성 패턴"}}},{"node":{"id":"d7ef20d8-74f4-5c32-93de-926edda896b5","fields":{"slug":"/Exactly_Once_Semantics/"},"frontmatter":{"title":"카프카는 어떻게 Exactly-Once Semantics 보장하나?"}}},{"node":{"id":"e7fe3cb6-4ce3-5c59-a6d0-05eef92f6505","fields":{"slug":"/trasaction_in_kafka/"},"frontmatter":{"title":"카프카에서의 Transactions"}}},{"node":{"id":"1e339f37-95b5-5510-ab63-bf6d80e6c393","fields":{"slug":"/\benabling_exactly_once_kafka_streams/"},"frontmatter":{"title":"카프카 스트림즈의 정확히 한 번"}}},{"node":{"id":"19fda853-336c-5380-8404-97d6685d50ab","fields":{"slug":"/Amazon SQS Deep Dive/"},"frontmatter":{"title":"Amazon SQS 딥다이브"}}},{"node":{"id":"b0f9150b-b03a-5207-89b9-60936e3cc578","fields":{"slug":"/Spring Cloud AWS Messaging Module Best Practice/"},"frontmatter":{"title":"Spring Cloud AWS Messaging 모듈 문제점 및 튜닝"}}},{"node":{"id":"75f3dc99-7d87-5d4e-adaa-a0066962034c","fields":{"slug":"/java-collection-wrapper/"},"frontmatter":{"title":"Collection Wrapper 클래스를 이용한 Service 계층 리팩토링 "}}},{"node":{"id":"8ad33af7-49f4-58e2-9a2b-049b9f550f96","fields":{"slug":"/spring-cache-hierarchy/"},"frontmatter":{"title":"Spring Cache 로 캐시 계층 구조 사용하기"}}},{"node":{"id":"6afadd0e-8b95-5508-87f7-3061118bbae4","fields":{"slug":"/redis-event-notifications/"},"frontmatter":{"title":"Redis Keyspace Notifications에 대해 알아보자"}}},{"node":{"id":"11ea05ce-4446-5775-bf6e-c3477d42d7c1","fields":{"slug":"/jpa-slow-cause/"},"frontmatter":{"title":"JPA가 느릴 수 밖에 없는 원초적인 이유"}}},{"node":{"id":"9b9bd5ca-dfcc-5d38-b278-1f205d612517","fields":{"slug":"/ehcache3/"},"frontmatter":{"title":"Ehcache3 캐시 라이브러리 소개 (with Spring Boot)"}}},{"node":{"id":"521d39b1-1b0f-58ed-98fd-4c9acece72d3","fields":{"slug":"/mysql-primary-key-design/"},"frontmatter":{"title":"고성능을 위한 MySQL Primary Key 설계 전략"}}},{"node":{"id":"785c3945-b99c-570d-86e3-236475f4039f","fields":{"slug":"/java-concurrency/"},"frontmatter":{"title":"Java의 동시성 프로그래밍"}}},{"node":{"id":"c41bb674-d9fa-56b2-accd-85951b6565af","fields":{"slug":"/java-concurrency-model/"},"frontmatter":{"title":"웹 서버를 위한 동시성 프로그래밍 모델"}}}]},"previous":{"fields":{"slug":"/spring-cache-hierarchy/"},"frontmatter":{"title":"Spring Cache 로 캐시 계층 구조 사용하기"}},"next":{"fields":{"slug":"/jpa-slow-cause/"},"frontmatter":{"title":"JPA가 느릴 수 밖에 없는 원초적인 이유"}}},"pageContext":{"id":"6afadd0e-8b95-5508-87f7-3061118bbae4","series":null,"previousPostId":"8ad33af7-49f4-58e2-9a2b-049b9f550f96","nextPostId":"11ea05ce-4446-5775-bf6e-c3477d42d7c1"}},"staticQueryHashes":[],"slicesMap":{}}