(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{413:function(_,v,i){"use strict";i.r(v);var t=i(21),l=Object(t.a)({},(function(){var _=this,v=_.$createElement,i=_._self._c||v;return i("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[i("p",[_._v("일반적으로 데이터 중심 애플리케이션은 다음을 필요로 한다.")]),_._v(" "),i("ul",[i("li",[_._v("구동 애플리케이션이나 다른 애플리케이션에서 나중에 다시 데이터를 찾을 수 있게 데이터를 저장 "),i("strong",[_._v("(데이터베이스)")])]),_._v(" "),i("li",[_._v("읽기 속도 향상을 위해 값비싼 수행결과를 기억 "),i("strong",[_._v("(캐시)")])]),_._v(" "),i("li",[_._v("사용자가 키워드로 데이터를 검색하거나 다양한 방법으로 필터링 할 수 있게 제공 "),i("strong",[_._v("(검색 색인, search Index)")])]),_._v(" "),i("li",[_._v("비동기 처리를 위해 다른 프로세스로 메시지 보내기 "),i("strong",[_._v("(스트림 처리, stream processing)")])]),_._v(" "),i("li",[_._v("주기적으로 대량의 누적된 데이터를 분석 "),i("strong",[_._v("(일괄 처리, batch Processing)")])])]),_._v(" "),i("p",[_._v("애플리케이션마다 요구사항이 다르기 때문에 어떤 도구와 어떤 접근 방식이 수행 중인 작업에 가장 적합한지 생각해야 한다.")]),_._v(" "),i("h1",{attrs:{id:"신뢰성-reliability"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#신뢰성-reliability"}},[_._v("#")]),_._v(" 신뢰성(Reliability)")]),_._v(" "),i("p",[_._v("하드웨어나 소프트웨어 결함, 인적 오류(humman error) 같은 역경에 직면하더라도 시스템은 지속적으로 올바르게 동작해야 한다.")]),_._v(" "),i("ul",[i("li",[_._v("잘못될 수 있는 일을 "),i("strong",[_._v("결함(fault)")]),_._v(" 이라 부른다. 결함을 예측하고 대처할 수 있는 시스템을 "),i("strong",[_._v("내결함성(fault-tolerant)")]),_._v(" 또는 "),i("strong",[_._v("탄력성(resilient)")]),_._v(" 을 지녔다고 말한다.")]),_._v(" "),i("li",[_._v("모든 종류의 결함을 견딜 수 있는 시스템을 만드는 것은 실현 가능하지 않다. 따라서 특정 유형의 "),i("strong",[_._v("결합 내성")]),_._v("에 대해서만 이야기하는 것이 가능하다.")]),_._v(" "),i("li",[_._v("결합은 장애(failure)와 동일하지 않다. 결함은 사양에서 벗어난 시스템의 한 구성 요소로 정의되지만, "),i("strong",[_._v("장애")]),_._v("는 사용자에게 필요한 서비스를 제공하지 못하고 시스템 전체가 멈춘 경우다.")]),_._v(" "),i("li",[_._v("결함 확률을 0으로 줄이는 것은 불가능하다. 따라서 결함으로 인해 장애가 발생하지 않게끔 내결함성 구조를 설계하는 것이 가장 좋다.")])]),_._v(" "),i("h3",{attrs:{id:"하드웨어-결함"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#하드웨어-결함"}},[_._v("#")]),_._v(" 하드웨어 결함")]),_._v(" "),i("p",[_._v("하드디스크가 고장 나고, 램의 고장, 대규모 정전과 같은 결합을 말한다.")]),_._v(" "),i("ul",[i("li",[_._v("각 해드웨어 구성 요소에 중복을 추가하는 방법이 일반적이다.")])]),_._v(" "),i("h3",{attrs:{id:"소프트웨어-결함"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#소프트웨어-결함"}},[_._v("#")]),_._v(" 소프트웨어 결함")]),_._v(" "),i("ul",[i("li",[_._v("소프트웨어 결함을 유발하는 버그는 특정 상황에 의해 발생하기 전까지 오랫동안 나타나지 않는다.")]),_._v(" "),i("li",[_._v("소프트웨어의 체계적 오류 문제는 신속한 해결책이 없다. 시스템의 가정과 상호작용에 대해 주의 깊게 생각하기, 빈틈없는 테스트, 프로세스 격리, 죽은 프로세스의 재시작 허용, 프로덕션 환경의 시스템 동작의 측정, 모니터링, 분석하기와 같은 여러 작은 일들이 문제 해결에 도움을 줄 수 있다.")])]),_._v(" "),i("h3",{attrs:{id:"인적-오류"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#인적-오류"}},[_._v("#")]),_._v(" 인적 오류")]),_._v(" "),i("ul",[i("li",[_._v("대규모 인터넷 서비스에 대한 한 연구에 따르면 운영자의 설정 오류가 중단의 주요 원인이다.")]),_._v(" "),i("li",[_._v("최고의 시스템은 다양한 접근 방식을 결합한다.\n"),i("ul",[i("li",[_._v("오류의 가능성을 최소화하는 방향으로 설계해라. 잘 설계된 추상화, API, 관리 인터페이스를 사용하면")]),_._v(" "),i("li",[_._v("실제 데이터를 사용해 안전하게 살펴보고 실험할 수 있지만 실제 사용자에게는 영향이 없는 비 프로덕션 샌드박스를 제공하라")]),_._v(" "),i("li",[_._v("단위 테스트부터 전체 시스템 통합 테스트와 수동 테스트까지 모든 수준에서 철저하게 테스트하라.")]),_._v(" "),i("li",[_._v("장애 발생의 영향을 최소화하기 위해 인적 오류를 빠르게 쉽게 복구할 수 있게 하라.")]),_._v(" "),i("li",[_._v("성능 지표와 오류율 같은 상세하고 명확한 모니터링 대책을 마련하라.")]),_._v(" "),i("li",[_._v("조작 교육과 실습을 시행하라.")])])])]),_._v(" "),i("h1",{attrs:{id:"확장성-scalability"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#확장성-scalability"}},[_._v("#")]),_._v(" 확장성(Scalability)")]),_._v(" "),i("p",[_._v("시스템의 데이터 양, 트래픽 양, 복잡도가 증가하면서 이를 처리할 수 있어야 한다.")]),_._v(" "),i("h3",{attrs:{id:"부하-기술하기"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#부하-기술하기"}},[_._v("#")]),_._v(" 부하 기술하기")]),_._v(" "),i("p",[_._v("부하는 "),i("strong",[_._v("부하 매개변수(load parameter)")]),_._v(" 라 부르는 몇 개의 숫자로 나타낼 수 있다. "),i("strong",[_._v("웹 서버의 초당 요청 수, 데이터베이스 읽기 대 쓰기 비율, 대화방의 동시 활성 사용자, 캐시 적중률")]),_._v(" 등이 될 수 있다.")]),_._v(" "),i("h3",{attrs:{id:"트위터의-예"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#트위터의-예"}},[_._v("#")]),_._v(" 트위터의 예")]),_._v(" "),i("ul",[i("li",[i("p",[_._v("트위터의 주요 두 가지 동작은 다음과 같다.")]),_._v(" "),i("ul",[i("li",[i("code",[_._v("트윗 작성 : 사용자는 팔로워에게 새로운 메시지를 개시할 수 있다.")])]),_._v(" "),i("li",[i("code",[_._v("홈 타임라인 : 사용자는 팔로우한 사람이 작성한 트윗을 볼 수 있다.")])])])]),_._v(" "),i("li",[i("p",[_._v("트위터의 확장성 문제는 트윗 작성이 아닌 팔로우 한 사용자들의 트윗의 수신 문제이다.")])]),_._v(" "),i("li",[i("p",[_._v("이 두가지 동작을 구현하는 방법은 크게 두 가지이다.")]),_._v(" "),i("ul",[i("li",[i("p",[_._v("접근 방식 1")]),_._v(" "),i("ul",[i("li",[_._v("사용자가 자신의 홈 타임라인을 요청하면, 팔로우하는 모든 사람을 찾고, 이 사람들의 모든 트윗을 찾아 시간순으로 정렬하도록 쿼리한다.")])])]),_._v(" "),i("li",[i("p",[_._v("접근 방식 2")]),_._v(" "),i("ul",[i("li",[_._v("각 수신 사용자용 홈 타인라인 캐시를 유지한다. 사용자가 트우잇을 작성하면 해당 사용자를 팔로우하는 사람을 모두 찾고 각자의 홈 타임라인 캐시에 새로운 트윗을 삽입한다.")])])])])]),_._v(" "),i("li",[i("p",[_._v("평균적으로 트윗 게시 요청량이 홈 타임라인 읽기 요청량에 비해 수백 배 적기 때문에 접근 방식2가 훨씬 잘 작동한다.")])]),_._v(" "),i("li",[i("p",[_._v("팔로워가 매우 많다면, 단일 트윗을 쓰기하는데 3천만 건 이상의 쓰기 요청이 될 수 있다.")])]),_._v(" "),i("li",[i("p",[_._v("트위터 사례에서 사용자당 팔로워 분포는 핵심 부하 매개변수가 된다.")])]),_._v(" "),i("li",[i("p",[_._v("트위터는 대부분의 사용자 트윗은 "),i("code",[_._v("접근 방식(2)")]),_._v("를 사용하고, 팔로워 수가 매우 많은 소수 사용자는 "),i("code",[_._v("접근 방식(1)")]),_._v("처럼 읽는 시점에 사용자의 홈 타임라인에 합친다.")])])]),_._v(" "),i("h3",{attrs:{id:"성능-기술하기"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#성능-기술하기"}},[_._v("#")]),_._v(" 성능 기술하기")]),_._v(" "),i("p",[_._v("시스템 부하를 기술하면 부하가 증가할 때 어떤 일이 일어나는지 조사할 수 있다.")]),_._v(" "),i("ul",[i("li",[_._v("부하 매개 변수를 증가시키고, 시스템 자원은 변경하지 않고 유지하면 시스템 성능은 어떻게 영향을 받을까?")]),_._v(" "),i("li",[_._v("부하 매개변수를 증가시켰을 때 성능이 변하지 않고 유지되길 원한다면 얼마나 많이 자원을 늘려야할까?")]),_._v(" "),i("li",[_._v("위 두 질문 모두 성능 수치가 필요하다.\n"),i("ul",[i("li",[_._v("일괄 처리 시스템의 관심사는 "),i("strong",[_._v("처리량(throughput)")])]),_._v(" "),i("li",[_._v("온라인 시스템의 관심사는 "),i("strong",[_._v("응답 시간(response time)")])])])])]),_._v(" "),i("h3",{attrs:{id:"응답시간은-일반적으로-평균보다는-백분위-percentile-를-사용하는-편이-더-좋다"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#응답시간은-일반적으로-평균보다는-백분위-percentile-를-사용하는-편이-더-좋다"}},[_._v("#")]),_._v(" 응답시간은 일반적으로 평균보다는 백분위(percentile)를 사용하는 편이 더 좋다.")]),_._v(" "),i("ul",[i("li",[_._v("사용자가 보통 얼마나 오랫동안 기다려야 하는지 알고 싶다면 중앙값(p50)이 좋은 지표다.")]),_._v(" "),i("li",[_._v("특이 값이 얼마나 좋지 않는지 알아보려면 상위 백분위를 살펴보는 것이 좋다.")]),_._v(" "),i("li",[i("code",[_._v("95분위, 99분위, 99.9분위(p55, p99, p999)")]),_._v("가 일반적이다.")]),_._v(" "),i("li",[_._v("예를 들어, 95분위 응답시간이 1.5초라면 100개의 요청 중 95개는 1.5초 미만이고, 5개는 1.5초보다 더 걸린다.")]),_._v(" "),i("li",[i("strong",[_._v("꼬리 지연 시간(tail latency)")]),_._v(" 으로 알려진 상위 백분위 응답 시간은 서비스의 사용자 경험에 직접 영향을 주기 때문에 영향을 준다.")]),_._v(" "),i("li",[_._v("아마존은 응답 시간 요구사항을 99.9분위로 기술한다. 왜냐하면 느린 요청을 경험한 고객들이 더 많은 데이터를 가지고 있고 VIP 이기 때문이다.")])]),_._v(" "),i("h3",{attrs:{id:"부하-대응-접근-방식"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#부하-대응-접근-방식"}},[_._v("#")]),_._v(" 부하 대응 접근 방식")]),_._v(" "),i("ul",[i("li",[i("strong",[_._v("용량 확장(scaling up, 수직 확장)")]),_._v(" : 좀 더 강력한 장비로 이동")]),_._v(" "),i("li",[i("strong",[_._v("규모 확장(scaling out, 수평 확장)")]),_._v(" : 다수의 낮은 사양 장비에 부하를 분산 → 비공유 아키텍처라 부름")]),_._v(" "),i("li",[_._v("범용적이고 모든 상황에 맞는 마법의 확장 아키텍처는 없다.\n"),i("ul",[i("li",[_._v("예를 들어 크기가 1KB인 초당 100,000건의 요청을 처리하도록 설계된 시스템과 크기가 2GB인 분당 3건의 요청을 처리하기 위해 설계된 시스템은 서로 같은 데이터 처리량이라 해도 매우 다르다.")])])]),_._v(" "),i("li",[_._v("아키텍처를 결정하는 요소는 "),i("strong",[_._v("읽기의 양, 쓰기의 양, 저장할 데이터의 양, 데이터 복잡도, 응답 시간 요구사항, 접근 패턴 등이 있다.")])]),_._v(" "),i("li",[_._v("특정 애플리케이션에 적합한 확장성을 갖춘 아키텍처는 주요 동작이 무엇이고 잘 하지 않는 동작이 무엇인지에 대한 가정을 바탕으로 구축한다. 이 가정이 곧 "),i("strong",[_._v("부하 매개변수")]),_._v("가 된다.")]),_._v(" "),i("li",[_._v("부가 매개변수의 대한 가정이 잘못되면 엔지니어링 노력은 헛수고가 되고 최악의 경우 역효과를 낳는다.")]),_._v(" "),i("li",[_._v("확장성을 갖춘 아키텍처는 보통 익숙한 패턴으로 나열된 범용적인 구성 요소로 구축된다.")])]),_._v(" "),i("h1",{attrs:{id:"_3-유지보수성-maintainability"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_3-유지보수성-maintainability"}},[_._v("#")]),_._v(" 3. 유지보수성(Maintainability)")]),_._v(" "),i("ul",[i("li",[_._v("시간이 지남에 따라 여러 다양한 사람들이 시스템 상에서 작업할 것이기 때문에 모든 사용자가 시스템 상에서 생산적으로 작업할 수 있게 해야한다.")]),_._v(" "),i("li",[_._v("소프트웨어 비용의 대부분은 초기 개발이 아니라 지속해서 이어지는 유지보수에 들어간다.\n"),i("ul",[i("li",[_._v("버그 수정, 시스템 운영 유지, 장애 조사, 새로운 플랫폼 적응, 새 사용 사례를 위한 변경, 기술 채무 상환, 새로운 기능 추가 등이 있다.")])])]),_._v(" "),i("li",[_._v("유지보수 고통을 최소화하기 위해 소프트웨어 시스템 설계 원칙은 다음 세 가지다.")])]),_._v(" "),i("h3",{attrs:{id:"_1-운용성-operability"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_1-운용성-operability"}},[_._v("#")]),_._v(" 1. 운용성(operability)")]),_._v(" "),i("blockquote",[i("p",[_._v("운영팀이 시스템을 원활하게 운영할 수 있게 쉽게 만들어라.")])]),_._v(" "),i("ul",[i("li",[_._v("좋은 운영성이란 동일하게 반복되는 태스크를 쉽게 수행하게끔 만들어 운영팀이 고부가가치 활동에 노력을 집중한다는 의미이다.\n"),i("ul",[i("li",[_._v("좋은 모니터링으로 런타임 동작과 시스템의 내부의 대한 가시성 제공")]),_._v(" "),i("li",[_._v("표준 도구를 이용해 자동화와 통합을 위한 우수한 자원을 제공")]),_._v(" "),i("li",[_._v("개별 장비 의존성을 회피, 유지보수를 위해 장비를 내리더라도 시스템 전체에 영향을 주지 않고 계속해서 운영 가능해야 함")]),_._v(" "),i("li",[_._v("좋은 문서와 이해하기 쉬운 운영 모델 제공")]),_._v(" "),i("li",[_._v("만족할 만한 기본 동작을 제공하고, 필요할 때 기본값을 다시 정의할 수 있는 자유를 관리자에게 부여")]),_._v(" "),i("li",[_._v("적절하게 자기 회복이 가능할 뿐 아니라 필요에 따라 관리자가 시스템 상태를 수동으로 제어할 수 있게 함")]),_._v(" "),i("li",[_._v("예측 가능하게 동작하고 예기치 않은 상황을 최소화함")])])])]),_._v(" "),i("h3",{attrs:{id:"_2-단순성-simplicity"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_2-단순성-simplicity"}},[_._v("#")]),_._v(" 2. 단순성(simplicity)")]),_._v(" "),i("blockquote",[i("p",[_._v("시스템에서 복잡도를 최대한 제거해 새로운 엔지니어가 시스템을 이해하기 쉽게 만들어라.")])]),_._v(" "),i("ul",[i("li",[_._v("소규모 소프트웨어 프로젝트에서는 간단하고 표현이 풍부한 코드로 말끔하게 시스템을 작성할 수 있지만 프로젝트가 커짐에 따라 시스템은 매우 복잡하고 이해하기 어려워 진다.")]),_._v(" "),i("li",[_._v("복잡도는 다양한 증상으로 나타난다.\n"),i("ul",[i("li",[_._v("상태 공간의 급증, 모듈 간 강한 커플링, 복잡한 의존성, 일관성 없는 네이밍과 용어, 성능 문제 해결을 목표로 한 해킹, 임시방편으로 문제를 해결한 특수 사례 등")])])]),_._v(" "),i("li",[_._v("우발적 복잡도란 소프트웨어가 풀어야 할 문제에 내제하지 않고 구현에서만 발생하는 것으로 정의된다.")]),_._v(" "),i("li",[_._v("우발적 복잡도를 제거하기 위한 최상의 도구는 "),i("strong",[_._v("추상화")]),_._v("다.")]),_._v(" "),i("li",[_._v("좋은 추상화는 다른 다양한 애플리케이션에서도 사용 가능하다. 이런 재사용은 비슷한 기능을 재구현하는 것보다 효율적이고 고품질 소프트웨어로 이어진다.")])]),_._v(" "),i("h3",{attrs:{id:"_3-발전성-evolvability"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#_3-발전성-evolvability"}},[_._v("#")]),_._v(" 3. 발전성(evolvability)")]),_._v(" "),i("blockquote",[i("p",[_._v("엔지니어가 이후에 시스템을 쉽게 변경할 수 있게 하라. 그래야 요구사항 변경 같은 예기치 않은 사용 사례를 적용하기가 쉽다.")])]),_._v(" "),i("ul",[i("li",[_._v("조직 프로세스 측면에서 "),i("strong",[_._v("애자일")]),_._v(" 작업 패턴은 변화에 적응하기 위한 프레임워크를 제공한다.")]),_._v(" "),i("li",[_._v("TDD, 리팩토링 같이 자주 변화하는 환경에서 소프트웨어를 개발할 때 도움이 되는 기술 도구와 패턴을 개발하고 있다.")])]),_._v(" "),i("h1",{attrs:{id:"정리"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#정리"}},[_._v("#")]),_._v(" 정리")]),_._v(" "),i("ul",[i("li",[_._v("애플리케이션이 유용하려면 다양한 요구사항을 충족시켜야 한다.")]),_._v(" "),i("li",[i("code",[_._v("기능적 요구사항")]),_._v(" :  여러 방법으로 데이터를 저장하고 조회하고 검색하고 처리하게끔 허용하는 작업과 같이 해야하는 일")]),_._v(" "),i("li",[i("code",[_._v("비기능적 요구사항")]),_._v(" : 보안, 신뢰성, 법규 준수, 확장성, 호환성, 유지보수성과 같은 일반 속성")]),_._v(" "),i("li",[_._v("신뢰성은 결함이 발생해도 시스템이 올바르게 동작하게 만든다는 의미이다.")]),_._v(" "),i("li",[_._v("확장성은 부하가 증가해도 좋은 성능을 유지하기 위한 전략을 의미한다.")]),_._v(" "),i("li",[_._v("유지보수성에는 시스템에서 작업하는 엔지니어와 운영 팀의 삶을 개선하는데 있다.")])])])}),[],!1,null,null,null);v.default=l.exports}}]);